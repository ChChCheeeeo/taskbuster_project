"""
Django settings for taskbuster_project project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
#print("you are in settings.base")
import os
from .key import SECRET_KEY


# SEEMS TO BE CIRCULAR IMPORT PROBLEM, GO OVER WHY
# FOR NOW USE A KEY FILE BUT ADD IT TO .gitignore

# for secret key
# from django.core.exceptions import ImproperlyConfigured

# def get_env_variable(var_name):
#     try:
#         print("looking for {}".format(var_name))
#         key = os.environ.get(var_name, 'default')
#         print("returning {}".format(key))
#         print()
#         #print("found: ", os.environ['SECRET_KEY'])
#         #return os.environ[var_name]
#         return os.environ.get(var_name, 'default')
#     except KeyError:
#         error_msg = "Set the %s environment variable" % var_name
#         raise ImproperlyConfigured(error_msg)

# SECRET_KEY = get_env_variable('SECRET_KEY')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# points to folder containing this file
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    # default
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party
    # The Django sites framework is required
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Login via Google
    'allauth.socialaccount.providers.google',
    # my apps
)

# used by Django sites framework
SITE_ID = 1


# make allauth to ask for the email (if possible) in the 
# authorization process. It will ask it to Google, 
# without any verification process, and after logging in, 
# it will redirect the user to the home page.
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_QUERY_EMAIL = True
LOGIN_REDIRECT_URL = "/"

MIDDLEWARE_CLASSES = (
    # default
    'django.contrib.sessions.middleware.SessionMiddleware',
    # non default
    'django.middleware.locale.LocaleMiddleware',
    # default
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'taskbuster_project.urls'

# for django-allauth
from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # default
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                #'django.template.context_processors.request',
                # non default
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                # deafult
                'django.contrib.messages.context_processors.messages',
                # Third party
                # this should work for django-allauth>=0.20.0-dev
                # but for know use TEMPLATE_CONTEXT_PROCESSORS
                # thrid party, required by allauth template tags
                #"django.core.context_processors.request",
                # allauth specific context processors
                #"allauth.account.context_processors.account",
                #"allauth.socialaccount.context_processors.socialaccount",
            ],
        },
    },
]

TEMPLATE_CONTEXT_PROCESSORS += (
    # Required by allauth template tags
    "django.core.context_processors.request",
    # allauth specific context processors
    "allauth.account.context_processors.account",
    "allauth.socialaccount.context_processors.socialaccount",
)

AUTHENTICATION_BACKENDS = (
    # Default backend -- used to login by username in Django admin
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

WSGI_APPLICATION = 'taskbuster_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # because using psql db
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'taskbuster_db',
        'USER': 'taskbuster_user',
        'PASSWORD': 'taskbuster_password',
        'HOST': 'localhost',
        'PORT': '',
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
from django.utils.translation import ugettext_lazy as _

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Los_Angeles'#'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# ugettext_lazy function is used to mark the language names 
# for translation, it’s usual to use the function’s 
# shortcut _. use ugettext_lazy because the other function 
# would cause import loops. 
LANGUAGES = (
    ('en', _('English')),
    ('ca', _('Catalan')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

# Tell Django to look for static files in the 
# taskbuster_project/static directory
# With this configuration, Django will look for static files
# in a folder named static inside each app and into the 
# taskbuster_project/static folder
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)